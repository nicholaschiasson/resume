image: alpine:latest

stages:
  - classify
  - test
  - build:deps
  - build
  - deploy
  - publish

variables:
  CLASSIFY_VERSION_FILE: CLASSIFY_VERSION

# Classify version template
.classify:version:template: &classify_version_template
  stage: classify
  script: &classify_version_template_script |
    if [ -z "$(echo "major minor patch" | grep "${CLASSIFY_VERSION}")" ]
    then
      CLASSIFY_VERSION=patch
    fi
    echo "${CLASSIFY_VERSION}" > "${CLASSIFY_VERSION_FILE}"
  cache:
    paths:
      - "${CLASSIFY_VERSION_FILE}"
    policy: push

# Classify version type on branches
classify:version:branches:
  <<: *classify_version_template
  script:
    - CLASSIFY_VERSION=${CI_COMMIT_REF_SLUG%%-*}
    - *classify_version_template_script
  only:
    - branches
  except:
    - master

# Classify version type on master
classify:version:master:
  <<: *classify_version_template
  image: perl:latest
  script:
    - CLASSIFY_VERSION="$(curl -qsX GET -H "Private-Token:${GITLAB_API_TOKEN}" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/commits/${CI_COMMIT_SHA}" | perl -pe 's/.*?"title":"Merge branch '\''([0-9a-z]+).*/\1/g')"
    - *classify_version_template_script
  only:
    - master

# Template for test jobs
.test:template: &test_template
  stage: test
  image: node:dubnium-alpine
  script: &test_script |
    npm install
    npm run $CI_JOB_NAME
  except:
    - tags

# Testing resume.json schema using resume-cli
test:schema:
  <<: *test_template

# Template for build jobs
.build:template: &build_template
  image: node:dubnium-alpine
  stage: build
  script: &build_script |
    export BUILD_TYPE="$(echo ${CI_JOB_NAME} | cut -d':' -f2)"
    export RESUME_FORMAT="$(echo ${CI_JOB_NAME} | cut -d':' -f3)"
    export RESUME_THEME="$(echo ${CI_JOB_NAME} | cut -d':' -f4)"
    export ARTIFACT_PREFIX="${BUILD_TYPE}:${RESUME_THEME}"
    # apk update
    # apk upgrade
    # echo @edge http://nl.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories
    # echo @edge http://nl.alpinelinux.org/alpine/edge/main >> /etc/apk/repositories
    # apk add --no-cache \
    #   chromium@edge=72.0.3626.121-r0 \
    #   nss@edge \
    #   freetype@edge \
    #   harfbuzz@edge \
    #   ttf-freefont@edge
    # export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
    # npm i puppeteer@1.11.0
    # addgroup -S pptruser
    # adduser -S -g pptruser pptruser
    # mkdir -p /home/pptruser/Downloads /app
    # chown -R pptruser:pptruser /home/pptruser
    # chown -R pptruser:pptruser /app
    npm install
    OUTPUT_RESUME_NAME=resume npm run build:${BUILD_TYPE}:${RESUME_FORMAT}
    mkdir -p deps out
    find * -maxdepth 0 -type f -name '*.html' -or -name '*.pdf' | while read f; do
      cp -fv ${f} "deps/${ARTIFACT_PREFIX}-${f}"
      mv -fv ${f} "out/${ARTIFACT_PREFIX}:${GITLAB_USER_NAME// /}-${f}"
    done
  artifacts:
    paths:
      - deps/*
      - out/*
    expire_in: 1 hrs
  except:
    - master
    - latest

# # favourite
# build:json-resume:html:elegant:
#   <<: *build_template
#   stage: build:deps

# build:json-resume:html:eloquent:
#   <<: *build_template
#   stage: build:deps

# favourite
build:json-resume:html:kendall:
  <<: *build_template
  stage: build:deps

# build:json-resume:html:kwan:
#   <<: *build_template
#   stage: build:deps

# build:json-resume:html:onepage:
#   <<: *build_template
#   stage: build:deps

# build:json-resume:html:paper:
#   <<: *build_template
#   stage: build:deps

# build:json-resume:html:short:
#   <<: *build_template
#   stage: build:deps

# build:json-resume:html:spartan:
#   <<: *build_template
#   stage: build:deps

# # favourite
# build:json-resume:pdf:elegant:
#   <<: *build_template

# build:json-resume:pdf:eloquent:
#   <<: *build_template

# favourite
build:json-resume:pdf:kendall:
  <<: *build_template

# build:json-resume:pdf:kwan:
#   <<: *build_template

# build:json-resume:pdf:onepage:
#   <<: *build_template

# build:json-resume:pdf:paper:
#   <<: *build_template

# build:json-resume:pdf:short:
#   <<: *build_template

# build:json-resume:pdf:spartan:
#   <<: *build_template

build:latex:pdf:default:
  <<: *build_template
  image: registry.gitlab.com/nicholaschiasson/resume/latex
  script:
    - apk add --no-cache nodejs npm
    - *build_script

.deploy:template: &deploy_template
  stage: deploy
  script: &deploy_script |
    ls out/* | while read f; do
      OUT=out/${f//://}
      mkdir -p $(dirname ${OUT})
      mv out/${f} ${OUT}
    done
    mv out .${ARTIFACT}
    rm -rf *
    mv .${ARTIFACT} ${ARTIFACT}
    rm -rf .* || echo
  artifacts:
    paths:
      - "*"
  except:
    - master
    - latest

# Deploy to gitlab pages
pages:
  <<: *deploy_template
  variables:
    ARTIFACT: public
  only:
    - tags

deploy:package:branches:
  <<: *deploy_template
  script:
    - export ARTIFACT=${GITLAB_USER_NAME// /}-${CI_COMMIT_SHA}
    - *deploy_script
  only:
    - branches

deploy:package:tags:
  <<: *deploy_template
  script:
    - export ARTIFACT=${GITLAB_USER_NAME// /}-${CI_COMMIT_TAG}
    - *deploy_script
  only:
    - tags

# Generates a new tag from commits to master
publish:tag:
  stage: publish
  image: node:carbon-alpine
  script:
    - apk add --no-cache curl perl
    - npm install -g semver
    - echo "Version classification found to be '$(cat ${CLASSIFY_VERSION_FILE})'"
    - PREVIOUS_TAG="$(curl -qsX GET -H "Private-Token:${GITLAB_API_TOKEN}" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/tags" | perl -pe 's/.*?"name":"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/g' | perl -pe 's/\[(.*)\]/\1/g')"
    - LATEST_TAG="$(semver -i "$(cat "${CLASSIFY_VERSION_FILE}")" "${PREVIOUS_TAG}" || echo 0.0.1)"
    - curl -qsX POST -H "Private-Token:${GITLAB_API_TOKEN}" -F ref="${CI_COMMIT_REF_NAME}" -F tag_name="${LATEST_TAG}" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/tags" > /dev/null 2>&1
  cache:
    paths:
      - "${CLASSIFY_VERSION_FILE}"
    policy: pull
  only:
    - master

# Updates the 'latest' tag to be equivalent to the last created tag
publish:latest:
  stage: publish
  script:
    - apk add --no-cache curl
    - curl -qsX DELETE -H "Private-Token:${GITLAB_API_TOKEN}" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/tags/latest" > /dev/null 2>&1
    - curl -qsX POST -H "Private-Token:${GITLAB_API_TOKEN}" -F ref="${CI_COMMIT_TAG}" -F tag_name=latest "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/tags" > /dev/null 2>&1
  only:
    - tags
  except:
    - latest
