image: alpine:latest

stages:
  - classify
  - test
  - build
  - publish

variables:
  CLASSIFY_VERSION_FILE: CLASSIFY_VERSION

# Classify version template
.classify:version:template: &classify_version_template
  stage: classify
  script: &classify_version_template_script |
    if [ -z "$(echo "major minor patch" | grep "${CLASSIFY_VERSION}")" ]
    then
      CLASSIFY_VERSION=patch
    fi
    echo "${CLASSIFY_VERSION}" > "${CLASSIFY_VERSION_FILE}"
  cache:
    paths:
      - "${CLASSIFY_VERSION_FILE}"
    policy: push

# Classify version type on branches
classify:version:branches:
  <<: *classify_version_template
  script:
    - CLASSIFY_VERSION=${CI_COMMIT_REF_SLUG%%-*}
    - *classify_version_template_script
  only:
    - branches
  except:
    - master

# Classify version type on master
classify:version:master:
  <<: *classify_version_template
  image: perl:latest
  script:
    - CLASSIFY_VERSION="$(curl -qsX GET -H "Private-Token:${GITLAB_API_TOKEN}" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/commits/${CI_COMMIT_SHA}" | perl -pe 's/.*?"title":"Merge branch '\''([0-9a-z]+).*/\1/g')"
    - *classify_version_template_script
  only:
    - master

# Template for test jobs
.test:template: &test_template
  stage: test
  image: node:dubnium-alpine
  script: &test_script |
    npm install
    npm run $CI_JOB_NAME
  except:
    - tags

# Testing resume.json schema using resume-cli
test:schema:
  <<: *test_template

# Template for build jobs
.build:template: &build_template
  stage: build
  script: &test_script |
    npm install
    npm run build:${BUILD_TYPE}
  artifacts:
    name: "${GITLAB_USER_NAME// /}_Resume_Package"
    paths:
      - "*.html"
      - "*.pdf"
  except:
    - master

build:json-resume:html:flat:
  <<: *build_template
  image: node:dubnium-alpine
  variables:
    BUILD_TYPE: json-resume
    JSON_RESUME_NAME: ${GITLAB_USER_NAME}
    JSON_RESUME_FORMAT: html
    JSON_RESUME_THEME: flat

build:json-resume:pdf:flat:
  <<: *build_template
  image: node:dubnium-alpine
  variables:
    BUILD_TYPE: json-resume
    JSON_RESUME_NAME: ${GITLAB_USER_NAME}
    JSON_RESUME_FORMAT: pdf
    JSON_RESUME_THEME: flat

build:latex:
  <<: *build_template
  image: blang/latex
  variables:
    BUILD_TYPE: latex

# Generates a new tag from commits to master
publish:tag:
  stage: publish
  image: node:carbon-alpine
  script:
    - apk add --no-cache curl perl
    - npm install -g semver
    - echo "Version classification found to be '$(cat ${CLASSIFY_VERSION_FILE})'"
    - PREVIOUS_TAG="$(curl -qsX GET -H "Private-Token:${GITLAB_API_TOKEN}" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/tags" | perl -pe 's/.*?"name":"([0-9]+\.[0-9]+\.[0-9]+)".*/\1/g' | perl -pe 's/\[(.*)\]/\1/g')"
    - LATEST_TAG="$(semver -i "$(cat "${CLASSIFY_VERSION_FILE}")" "${PREVIOUS_TAG}" || echo 0.0.1)"
    - curl -qsX POST -H "Private-Token:${GITLAB_API_TOKEN}" -F ref="${CI_COMMIT_REF_NAME}" -F tag_name="${LATEST_TAG}" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/tags" > /dev/null 2>&1
  cache:
    paths:
      - "${CLASSIFY_VERSION_FILE}"
    policy: pull
  only:
    - master

# Updates the 'latest' tag to be equivalent to the last created tag
publish:latest:
  stage: publish
  script:
    - apk add --no-cache curl
    - curl -qsX DELETE -H "Private-Token:${GITLAB_API_TOKEN}" "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/tags/latest" > /dev/null 2>&1
    - curl -qsX POST -H "Private-Token:${GITLAB_API_TOKEN}" -F ref="${CI_COMMIT_TAG}" -F tag_name=latest "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/repository/tags" > /dev/null 2>&1
  only:
    - tags
  except:
    - latest
